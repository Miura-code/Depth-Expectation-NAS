01/01 04:00:34PM parser.py:28 [INFO] 
01/01 04:00:34PM parser.py:29 [INFO] Parameters:
01/01 04:00:34PM parser.py:31 [INFO] DAG=Genotype2(DAG1=[[('skip_connect', 1), ('skip_connect', 0)], [('skip_connect', 1), ('skip_connect', 0)], [('skip_connect', 1), ('skip_connect', 3)], [('skip_connect', 3), ('skip_connect', 2)], [('skip_connect', 3), ('skip_connect', 4)], [('skip_connect', 4), ('max_pool_3x3', 5)], [('skip_connect', 5), ('skip_connect', 6)], [('avg_pool_3x3', 6), ('avg_pool_3x3', 7)], [('avg_pool_3x3', 7), ('skip_connect', 8)], [('skip_connect', 8), ('avg_pool_3x3', 9)]], DAG1_concat=[3, 4], DAG2=[[('skip_connect', 0), ('skip_connect', 1)], [('skip_connect', 0), ('skip_connect', 1)], [('skip_connect', 1), ('skip_connect', 2)], [('skip_connect', 2), ('skip_connect', 3)], [('skip_connect', 3), ('skip_connect', 4)], [('avg_pool_3x3', 4), ('skip_connect', 5)], [('skip_connect', 6), ('max_pool_3x3', 5)], [('skip_connect', 6), ('skip_connect', 7)], [('skip_connect', 7), ('avg_pool_3x3', 9)], [('avg_pool_3x3', 8), ('avg_pool_3x3', 9)]], DAG2_concat=[3, 4], DAG3=[[('skip_connect', 0), ('skip_connect', 1)], [('skip_connect', 1), ('skip_connect', 0)], [('skip_connect', 1), ('skip_connect', 3)], [('skip_connect', 2), ('skip_connect', 3)], [('skip_connect', 3), ('skip_connect', 4)], [('skip_connect', 4), ('skip_connect', 5)], [('skip_connect', 6), ('skip_connect', 5)], [('skip_connect', 6), ('skip_connect', 7)], [('skip_connect', 7), ('skip_connect', 8)], [('skip_connect', 8), ('skip_connect', 9)]], DAG3_concat=[4, 5])
01/01 04:00:34PM parser.py:31 [INFO] ADVANCED=1
01/01 04:00:34PM parser.py:31 [INFO] BATCH_SIZE=64
01/01 04:00:34PM parser.py:31 [INFO] CHECKPOINT_RESET=0
01/01 04:00:34PM parser.py:31 [INFO] CUTOUT_LENGTH=0
01/01 04:00:34PM parser.py:31 [INFO] DATA_PATH=../data/
01/01 04:00:34PM parser.py:31 [INFO] DATASET=cifar100
01/01 04:00:34PM parser.py:31 [INFO] DESCRIPTION=
01/01 04:00:34PM parser.py:31 [INFO] DISCRETE=1
01/01 04:00:34PM parser.py:31 [INFO] GENOTYPE=Genotype3(normal1=[[('sep_conv_5x5', 0), ('sep_conv_3x3', 1)], [('sep_conv_3x3', 1), ('sep_conv_3x3', 0)], [('sep_conv_3x3', 1), ('sep_conv_3x3', 2)], [('sep_conv_3x3', 0), ('sep_conv_5x5', 4)]], normal1_concat=range(2, 6), reduce1=[[('sep_conv_3x3', 0), ('skip_connect', 1)], [('sep_conv_3x3', 1), ('max_pool_3x3', 0)], [('sep_conv_3x3', 2), ('sep_conv_3x3', 1)], [('max_pool_3x3', 0), ('dil_conv_3x3', 1)]], reduce1_concat=range(2, 6), normal2=[[('skip_connect', 0), ('sep_conv_5x5', 1)], [('skip_connect', 0), ('skip_connect', 2)], [('avg_pool_3x3', 0), ('avg_pool_3x3', 2)], [('skip_connect', 0), ('avg_pool_3x3', 2)]], normal2_concat=range(2, 6), reduce2=[[('avg_pool_3x3', 0), ('avg_pool_3x3', 1)], [('avg_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 2), ('avg_pool_3x3', 0)], [('skip_connect', 2), ('avg_pool_3x3', 0)]], reduce2_concat=range(2, 6), normal3=[[('skip_connect', 0), ('skip_connect', 1)], [('skip_connect', 0), ('dil_conv_3x3', 1)], [('skip_connect', 0), ('skip_connect', 1)], [('skip_connect', 0), ('skip_connect', 2)]], normal3_concat=range(2, 6))
01/01 04:00:34PM parser.py:31 [INFO] GPUS=[0]
01/01 04:00:34PM parser.py:31 [INFO] INIT_CHANNELS=16
01/01 04:00:34PM parser.py:31 [INFO] LAYERS=32
01/01 04:00:34PM parser.py:31 [INFO] LOGGER=<Logger H-DAS (INFO)>
01/01 04:00:34PM parser.py:31 [INFO] PATH=/home/miura/lab/KD-hdas/results/search_stage_KD/cifar100/Pruning/s1-expected2-sw3-g0.01_30-30/test/test-discrete-20250101-160034
01/01 04:00:34PM parser.py:31 [INFO] RESUME_PATH=/home/miura/lab/KD-hdas/results/search_stage_KD/cifar100/Pruning/s1-expected2-sw3-g0.01_30-30/best.pth.tar
01/01 04:00:34PM parser.py:31 [INFO] SAVE=test
01/01 04:00:34PM parser.py:31 [INFO] SEED=0
01/01 04:00:34PM parser.py:31 [INFO] SHARE_STAGE=0
01/01 04:00:34PM parser.py:31 [INFO] SLIDE_WINDOW=3
01/01 04:00:34PM parser.py:31 [INFO] SPEC_CELL=1
01/01 04:00:34PM parser.py:31 [INFO] TRAIN_PORTION=1.0
01/01 04:00:34PM parser.py:31 [INFO] TYPE=SearchEvalCurriculum
01/01 04:00:34PM parser.py:31 [INFO] WORKERS=4
01/01 04:00:34PM parser.py:32 [INFO] 
01/01 04:00:34PM testSearchedModel_main.py:43 [INFO] Logger is set - test start
####### ALPHA #######
# Alpha - DAG
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 0., 0.],
        [0., 0., 1., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 0., 0.],
        [0., 1., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 0., 0.],
        [0., 0., 1., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
Parameter containing:
tensor([[0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]], device='cuda:0', requires_grad=True)
# Beta
Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       requires_grad=True)
Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       requires_grad=True)
Parameter containing:
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       requires_grad=True)
#####################
01/01 04:00:35PM params_util.py:51 [INFO] --> Loaded DISCRETED checkpoint '/home/miura/lab/KD-hdas/results/search_stage_KD/cifar100/Pruning/s1-expected2-sw3-g0.01_30-30/best.pth.tar'
01/01 04:00:35PM params_util.py:60 [INFO] --> Loaded alpha parameters are Freezed
01/01 04:00:41PM testSearchedModel_main.py:100 [INFO] Test Prec(@1, @5) = (68.8100%, 90.6000%)
01/01 04:00:41PM testSearchedModel_main.py:101 [INFO] Time to Test = (1735714835.7107084, 1735714841.490431, 5.779722690582275)
